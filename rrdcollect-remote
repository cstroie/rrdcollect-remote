#!/usr/bin/perl

=pod

=head1 NAME

rrdcollect-remote - Collect rrdcollect output from several hosts to update local RRD files.

=head1 SYNOPSIS

B<rrdcollect-remote> [B<-MFh>] [B<-c> config] [B<-l> logconfig]

=head1 DESCRIPTION

rrdcollect-remote is a daemon that uses the rrdcollect ability to print RRD updates commands to its
standard output to do updates from a remote machine using a persistent connection. Thus you can
centralize rrdcollect outputs of several hosts on a single repository with no need for complex and
intrusive file-sharing protocols like NFS or CPU-intensive and inefficiant periodic polling like
SNMP and so on.

=head1 OPTIONS

=over 4

=item B<-c>, B<--conf> I<file>

Path to the configuration file. By default, rrdcollect-remote looks
into /etc/rrdcollect-remote/rrdcollect-remote.conf file.

=item B<-l>, B<--logconf> I<file>

Path to the log configuration file. By default, rrdcollect-remote
looks into /etc/rrdcollect-remote/log.conf file.

=item B<-p>, B<pid-file> I<file>

Path to the PID file. By default, rrdcollect-remote uses the
/var/run/rrdcollect-remote.pid file

=item B<-v>, B<--version>

Print the version number

=item B<-M>, B<--m4>

Pre-process the configuration file with the macro expansion package I<m4>.

=item B<-F>, B<--forground>

Don't put rrdcollect-remote process into background.

=item B<-h>, B<--help>

Print the help message.

=back

=head1 CONFIGURATION

If the configuration end with .m4 it will be pre-processed with GNU C<m4>.

=over 4

=item B<host>

Address of the host on which you want grabbe rrdcollect output.

You can add a group information to you host. This information can be
usefull for target RRD path generation. You add group info, prepend
your host with the group name between brackets (eg: [mygroup]example.com).

=item B<retry-interval>

Number of seconds to wait before retry a connection to the remote host
on failure. Default value is 5 seconds.

=item B<rrdfiles-path>

Path to the base directory for RRD files. You can use some tags that
will be changed at runtime like:

=over 4

=item B<%h>

short hostname (minus the domain part)

=item B<%d>

domainname (can be empty)

=item B<%H>

full hostname

=item B<%g>

host group (can be empty)

=item B<%n>

name (RRD filename without the directory part nor the .rrd extension)

=item B<%f>

RRD filename

=item B<%F>

RRD full file path (often same as B<%f>)

=back

Default value is /var/lib/rrdcollect-remote/%h/%f.

=item B<logconf>

Path to the log configuration file. Default value is
C</etc/rrdcollect-remote/rrdcollect-remote.conf>.

=item B<pid-file>

Path to the PID file. Default value is
C</var/run/rrdcollect-remote.pid>.

=item B<auto-rrd-create>

Enable/disable creation of RRD files when needed. If this option is
on, rrdcollect-remote will try to find RRD create information for the
missing file in comments of the remote rrdcollect configuration file.

Can be on or off. Default value is On.

=item B<timeout>

How many second to wait for connection timeout. Default value is 2, use 0 to disable timeout.

=back

=head1 CLIENT INSTALLATION

In order to allow rrdcollect-remote to gather rrdcollect output, you
have to setup each machine you want to monitor to output rrdcollect
data on a specific port. Default port is 9042 if not specified in the
rrdcollect-remote configuration.

The easier want to proceed is to use the super daemon inetd. The
inetd line would do the trick:

    9042 stream tcp nowait root /usr/sbin/rrdcollect /usr/sbin/rrdcollect -o-

If you need some more security, you can use the tcp wrapper to
restrict access to certain IPs (see L<tcpd> man page for more info):

    9042 stream tcp nowait root /usr/sbin/tcpd /usr/sbin/rrdcollect -o-

=head1 AUTOMATIC RRD CREATION

The rrdcollect tool doesn't implement a way to create RRD files. It
only update DS of existing RRD files, letting you do the RRD creation
work. So rrdcollect-remote use a trick to let you inform it how to
create RRD files. It's pretty simple, you just have to put a comment
starting with "rrdtool create <file.rrd>" words followed by valid RRD
creation arguments. You can break the command if you end the line by a
backslash and if the next line (containing the rest of the command)
start with a comment character (sharp). Then you can cat the
configuration file into the socket just before to start
rrdcollect. Thus rrdcollect-remote will keep all lines starting with a
sharp (#) and extract rrdcreate <file.rrd> args... commands from them
if needed.

You can use the special character "#" in the filename to match one or
more numbers in the file (see example).

Exemple of valid RRD create info:

    # Auto-RRD-Create Example
    #
    # rrdtool create test.rrd --step 5 \
    #     DS:foobar:GAUGE:2:0:U \
    #     RRA:AVERAGE:0.5:1:18000

    file:///proc/test
    "foobar: %d"            test.rrd:foobar

    # Pattern example
    #
    # rrdtool create cpu#-stat.rrd --step 5 \
    #     DS:user:COUNTER:60:0:U \
    #     DS:nice:COUNTER:60:0:U \
    #     DS:system:COUNTER:60:0:U \
    #     DS:idle:COUNTER:60:0:U \
    #     RRA:AVERAGE:0.5:1:18000

    file:///proc/stat
    "cpu0 %d %d %d %d" cpu0-stat.rrd:user,nice,system,idle
    "cpu1 %d %d %d %d" cpu1-stat.rrd:user,nice,system,idle
    "cpu2 %d %d %d %d" cpu2-stat.rrd:user,nice,system,idle
    "cpu3 %d %d %d %d" cpu3-stat.rrd:user,nice,system,idle

Example of script you can launch from inetd to allow auto-creation:

    #!/bin/sh
    grep '^#' /etc/rrdcollect.conf
    exec /usr/sbin/rrdcollect -o- -c /etc/rrdcollect.conf

=head1 LOGGER CONFIGURATION

See L<Log::Log4perl>

=head1 EXAMPLES

See example directory from the source tree.

=head1 SEE ALSO

L<rrdcollect>, L<rrdtool>, L<Log::Log4perl>, L<perl>

=head1 AUTHOR

Olivier Poitrey E<lt>rs@mmania.comE<gt>

=head1 LICENCE

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

=head1 COPYRIGHT

Copyright (C) 2004 - Olivier Poitrey

=cut

use strict;
use AppConfig;
use Log::Log4perl;
use Proc::Daemon;
use RRDs;
use IO::File;
use IO::Select;
use IO::Socket::INET;
use File::Basename;
use File::Path;
use File::Temp;
use sigtrap handler => \&sig_handler, qw(normal-signals error-signals ALRM CHLD);

our $VERSION = '1.1.1';

# some globals
our %hostlist;
our @reverse_map;
our %pid_map;
our %known_pid;
our %ScheduledRestart;

$ENV{PATH} = "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin";

my $config = new AppConfig;

$config->define("conf|c=s",         {DEFAULT => "/etc/rrdcollect-remote/rrdcollect-remote.conf"});
$config->define("logconf|l=s",      {DEFAULT => "/etc/rrdcollect-remote/log.conf"});
$config->define("pid-file|p=s",     {DEFAULT => '/var/run/rrdcollect-remote.pid'});
$config->define("m4|M!");
$config->define('forground|F!');
$config->define("retry-interval=i", {DEFAULT => 10});
$config->define("host=s@");
$config->define("rrdfiles-path=s",  {DEFAULT => '/var/lib/rrdcollect-remote/%h/%f'});
$config->define("auto-rrd-create!", {DEFAULT => 1});
$config->define("help|h!");
$config->define("version|v!");
$config->define("timeout|t=s",      {DEFAULT => 2});

# save argv for later use
my @argtmp = @ARGV;
# parse command line args to find an alternate configuration file location
$config->getopt();

if($config->get('help'))
{
    print_help();
    exit;
}

if($config->get('version'))
{
    print_version();
    exit;
}

# Configuration file parsing
#
# pre-parse the config file if:
# - the config file with the postfixed .m4 extension exists
# - the config file end with .m4 extension
# - the m4 option is on
if($config->get("conf") =~ /\.m4$/)
{
    $config->set("m4", 1);
}
else
{
    if(-f $config->get("conf") . '.m4')
    {
        $config->set("m4", 1);
    }
}
if($config->get("m4"))
{
    if(open(CFG, 'm4 '.$config->get("conf").'|'))
    {
        $config->file(\*CFG);
    }
    else
    {
        die("Can't open m4 pipe for reading configuration file: $!");
    }
}
else
{
    $config->file($config->get("conf"));
}

# reparse the command line args to let them override the configuration file
$config->getopt(\@argtmp);

# setup logger
$0 = 'rrdcollect-remote';
Log::Log4perl::init($config->get('logconf'));
my $logger = Log::Log4perl->get_logger('rrdcollect-remote');

# check for existing running instance
my $pid_file = $config->get('pid-file');
if(-f $config->get('pid-file'))
{
    my $pid_fh = new IO::File($pid_file)
        or $logger->logdie("Cannot read PID file `$pid_file': $!");
    my $running_pid = $pid_fh->getline();
    no warnings qw(taint);
    if(kill(0, $running_pid) == 1)
    {
        $logger->logdie("already running [$running_pid]");
    }
}

# daemonize
unless($config->get("forground"))
{
    Proc::Daemon::Init();
}

$logger->info('Starting statistics grabber');

# Init the host list
@hostlist{@{$config->get("host")}} = undef;

# create the PID file
my $pid_fh = new IO::File($pid_file, O_WRONLY|O_CREAT|O_TRUNC)
    or $logger->logdie("Cannot write to PID file `$pid_file': $!");;
$logger->debug("Writing PID file ($$)");
$pid_fh->print($$);
$pid_fh->close();


my $select = new IO::Select();

my $host;
for my $host (keys %hostlist)
{
    remote_collector_start($host);
}

# waiting for rrd update commands (main loop)
my(@ready, $fh);
my(@tokenized, $line, $filepath, $new_filepath);
while(1)
{
    $logger->debug("Waiting for something happen...");
    @ready = $select->can_read();
    foreach $fh (@ready)
    {
        my $host = $reverse_map[fileno($fh)];
        my $host_info = $hostlist{$host};

        $line = $fh->getline();

        if($fh->eof())
        {
            $select->remove($fh);

            if(defined $host and length $host)
            {
                $logger->error("Remote collector for `$host' closed its standard output, "
                    . "scheduling a restart");

                schedule_restart($host);
            }
            else
            {
                $logger->debug("Close anonymous FH: " . $fh->fileno());
            }

            unless(defined($line) or length($line))
            {
                next;
            }
        }

        unless(defined $host and length $host)
        {
            $logger->error("Anonymous request: $line");
            next;
        }

        unless(defined($line) or length($line))
        {
            $logger->debug("Received empty line from `$host'");
            next;
        }

        # some check of the received command
        @tokenized = split(' ', $line);
        if(@tokenized[0] eq 'update')
        {
            # we don't need the "update" keyword
            shift(@tokenized);
            $host_info->{tmp}->{update_stamp} = 1;
        }
        else
        {
            if(!exists($host_info->{tmp}->{update_stamp}))
            {
                if(!$host_info->{tmp}->{config_fh} and $config->get('auto-rrd-create'))
                {
                    unless($host_info->{tmp}->{config_fh} = File::Temp::tempfile(CLEANUP => 1))
                    {
                        $logger->error("Can't create temporary file");
                    }
                }
                $host_info->{tmp}->{config_fh}->print($line);
            }
            else
            {
                $logger->error("Received invalid command from `$host': $line");
            }
            next;
        }

        # get the filepath skiping --template option if before the filepath
        $filepath = $tokenized[0] eq '-t' || $tokenized[0] eq '--template'
            ? \$tokenized[2] : \$tokenized[0];

        # do some safe checking
        if(index($$filepath, '..') != -1 or # backreferences into the path
           index($$filepath, '/')  == 0)    # absolute path
        {
            $logger->error("File path unsafe from host `$host'!! ($$filepath)");
            next;
        }

        $new_filepath = get_rrdpath($$filepath, $host_info);

        if($config->get('auto-rrd-create') && ! -f $new_filepath)
        {
            create_rrd($new_filepath, $$filepath, $host_info) or next;
        }

        $$filepath = $new_filepath;

        $logger->debug("Update file `$$filepath' requested by `$host'");

        RRDs::update(@tokenized);
    }
}

sub get_rrdpath
{
    my($filepath, $host_info) = @_;

    my $path = $config->get("rrdfiles-path");
    my $file = basename($filepath);
    my $name = basename($filepath, '.rrd');

    my($short_hostname, $domainname) = split(/\./, $host_info->{host}, 2);

    my %env =
    (
        h => $short_hostname,
        d => $domainname,
        H => $host_info->{host},
        g => $host_info->{group},
        n => $name,
        f => $file,
        F => $filepath,
    );
    $path =~ s/\%(\w)/$env{$1}/g;

    return $path;
}

sub create_rrd
{
    my($filepath, $orig_filepath, $host_info) = @_;

    my $file = basename($orig_filepath);

    $logger->debug("try to find how to create RRD file `$filepath' into remote rrdcollect conf");

    my $conf = $host_info->{tmp}->{config_fh};
    if(!defined($conf) || !fileno($conf))
    {
        $logger->info("There is no information about RRD creation in config file for `$filepath'");
        return;
    }
    seek($conf, 0, 0);
    my($line, @create_cmd);
    my $in = 0;
    while($line = $conf->getline())
    {
        if(!$in)
        {
            if($line =~ /^#\s*rrdtool\s+create\s+(\S+)\s*(.*?)\s*(\\?)$/
               && filename_match($1, $file))
            {
                $in = 1;
                @create_cmd = ($filepath, split(' ', $2));
                last if not length $3;
            }
        }
        else
        {
            # get splited commands
            $line =~ s/^#\s*/ / or next;
            if($line =~ s/\s*\\\n$//)
            {
                push(@create_cmd, split(' ', $line));
            }
            else
            {
                chomp($line);
                push(@create_cmd, split(' ', $line));
                $in = 0;
            }
        }
    }

    if($in)
    {
        $logger->error("Syntax error in rrd command for file `$file' on host `$host': EOF before end of command");
        return;
    }

    unless(@create_cmd)
    {
        $logger->info("There is no information about RRD creation in config file for `$filepath'");
        return;
    }


    $logger->info("Creating RRD file `$filepath'");
    $logger->debug("... using command: " . join(' ', @create_cmd));

    mkpath(dirname($filepath));

    RRDs::create(@create_cmd);
}

sub filename_match
{
    my($pattern, $value) = @_;

    if(index($pattern, '#') == -1)
    {
        return $pattern eq $value;
    }

    # the sharp(#) char in pattern means one or more number in $value.
    # here we try to match them in a secure way (we can't trust $value
    # because it comes from the network)
    my($pindex, $length, $index) = (0, 0, 0);
    my $substr;
    while(length($pattern) > $pindex)
    {
        if(($_ = index($pattern, '#', $pindex)) != -1)
        {
            $length = $_ - $pindex;
        }
        else
        {
            $length = length($pattern) - $pindex;
        }
        if(index($value, substr($pattern, $pindex, $length), $index) != -1)
        {
            $index += $length;
            $pindex += $length;
            if(substr($pattern, $pindex, 1) eq '#')
            {
                $pindex++;
                # on #, ensure that at least one number is present
                if(substr($value, $index, 1) =~ /\d/)
                {
                    $index++
                }
                else
                {
                    return 0;
                }
                # then harvest others
                while(substr($value, $index, 1) =~ /\d/)
                {
                    $index++;
                }
            }
        }
        else
        {
            return 0;
        }
    }

    return 1;
}

sub schedule_restart
{
    my($host) = @_;

    return unless defined $host and length $host;
    $logger->debug("Schedule restart for `$host'");

    if(exists $ScheduledRestart{$host})
    {
        $logger->debug("Restart already scheduled for `$host'");
        return;
    }

    $ScheduledRestart{$host} = 1;
    # wait X second before retry
    alarm($config->get("retry-interval"));
}

sub unschedule_restart
{
    my($host) = @_;
    return unless defined $host and length $host;
    delete $ScheduledRestart{$host};
}

sub remote_collector_start
{
    my($host) = @_;
    $logger->debug("Start remote collector for `$host'");
    _remote_collector_start($host) || schedule_restart($host);
}

sub remote_collector_restart
{
    my($host) = @_;
    $logger->debug("Restart remote collector of `$host'");
    _remote_collector_stop($host);
    _remote_collector_start($host) || schedule_restart($host);
}

sub remote_collector_stop
{
    my($host) = @_;
    $logger->debug("Stop remote collector of `$host'");
    unschedule_restart($host);
    _remote_collector_stop($host);
}

sub _remote_collector_start
{
    my($host) = @_;

    unless(defined $host or length $host)
    {
        $logger->error("Anonymous restart request");
        return;
    }

    my $host_info = $hostlist{$host};

    unless(defined $host_info)
    {
        if($host =~ /^(?:\[(.*?)\])?(.+)(?::(\d+))?$/)
        {
            $host_info =
            {
                host   => $2,
                group  => $1,
                port   => $3 || 9042,
            };
        }
        else
        {
            $logger->error("Syntax error in host definition: $host");
        }
    }

    my %opts =
    (
        PeerAddr  => $host_info->{host},
        PeerPort  => $host_info->{port},
        Timeout   => $config->get('timeout'),
    );
    my $socket = IO::Socket::INET->new(%opts);

    if(!defined $socket)
    {
        $logger->error("Can't connect to `$host_info->{host}:$host_info->{port}'");
        return 0;
    }

    delete $host_info->{tmp};
    $host_info->{handle} = $socket;
    $hostlist{$host} = $host_info;
    $reverse_map[fileno($socket)] = $host;
    $select->add($socket);
}

sub _remote_collector_stop
{
    my($host) = @_;

    my $info = $hostlist{$host};
    return unless defined $info;
    my $socket = $info->{handle};
    $select->remove($socket);
    $socket->close() if defined $socket;
}

sub print_version
{
    print STDERR <<EOT;
rrdcollect-remote $VERSION
Written by Olivier Poitrey

Copyright (C) 2004 Free Software Foundation, Inc.
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
EOT
}

sub print_help
{
    print STDERR <<EOT;
rrdcollect-remote OPTIONS

OPTIONS:
    -c, --conf              Path to configuration file
                            (default: /etc/rrdcollect-remote/rrdcollect-remote.conf)
    -l, --logconf           Path to the log configuration file
                            (default: /etc/rrdcollect-remote/log.conf)
    -p, --pid-file          Path to the PID file
                            (default: /var/run/rrdcollect-remote.pid)
    -M, --m4                Pre-process the configuration file with the
                            macro expension package m4.
    -F, --forground         Don't go to background.
    -h, --help              Print this help
    -v, --version           Print the version number
EOT
}

# HANDLERS

sub sig_handler
{
    my($sig) = @_;
    if($sig eq 'ALRM')
    {
        $logger->debug("restart_handler called");
        for my $host (keys %ScheduledRestart)
        {
            unschedule_restart($host);
            remote_collector_restart($host)
                if defined $host and length $host;
        }
    }
    else
    {
        $SIG{ALRM} = 'IGNORE';
        $SIG{CHLD} = 'IGNORE';
        for my $host (keys %hostlist)
        {
            remote_collector_stop($host);
        }
        exit;
    }
}
